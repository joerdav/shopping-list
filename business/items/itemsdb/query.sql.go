// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package itemsdb

import (
	"context"

	"github.com/google/uuid"
)

const createItem = `-- name: CreateItem :exec
INSERT INTO items (id, name, shop_id, user_id)
VALUES (?, ?, ?, ?)
`

type CreateItemParams struct {
	ID     uuid.UUID
	Name   string
	ShopID uuid.UUID
	UserID string
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) error {
	_, err := q.db.ExecContext(ctx, createItem,
		arg.ID,
		arg.Name,
		arg.ShopID,
		arg.UserID,
	)
	return err
}

const getItem = `-- name: GetItem :one
SELECT id, name, user_id, shop_id FROM items
WHERE id = ? LIMIT 1
`

func (q *Queries) GetItem(ctx context.Context, id uuid.UUID) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItem, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.ShopID,
	)
	return i, err
}

const listItems = `-- name: ListItems :many
SELECT id, name, user_id, shop_id FROM items
WHERE user_id = ?
ORDER BY name
`

func (q *Queries) ListItems(ctx context.Context, userID string) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, listItems, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.ShopID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItemsByShop = `-- name: ListItemsByShop :many
SELECT id, name, user_id, shop_id FROM items
WHERE shop_id = ?
ORDER BY name
`

func (q *Queries) ListItemsByShop(ctx context.Context, shopID uuid.UUID) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, listItemsByShop, shopID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.ShopID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItem = `-- name: UpdateItem :one
UPDATE items
set name = ?,
shop_id = ?
WHERE id = ?
RETURNING id, name, user_id, shop_id
`

type UpdateItemParams struct {
	Name   string
	ShopID uuid.UUID
	ID     uuid.UUID
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, updateItem, arg.Name, arg.ShopID, arg.ID)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.ShopID,
	)
	return i, err
}
