// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package shopsdb

import (
	"context"

	"github.com/google/uuid"
)

const createShop = `-- name: CreateShop :exec
INSERT INTO shops (id, name)
VALUES (?, ?)
`

type CreateShopParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) CreateShop(ctx context.Context, arg CreateShopParams) error {
	_, err := q.db.ExecContext(ctx, createShop, arg.ID, arg.Name)
	return err
}

const deleteShop = `-- name: DeleteShop :exec
DELETE FROM shops
WHERE id = ?
`

func (q *Queries) DeleteShop(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteShop, id)
	return err
}

const getShop = `-- name: GetShop :one
SELECT id, name FROM shops
WHERE id = ? LIMIT 1
`

func (q *Queries) GetShop(ctx context.Context, id uuid.UUID) (Shop, error) {
	row := q.db.QueryRowContext(ctx, getShop, id)
	var i Shop
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listShops = `-- name: ListShops :many
SELECT id, name FROM shops
ORDER BY name
`

func (q *Queries) ListShops(ctx context.Context) ([]Shop, error) {
	rows, err := q.db.QueryContext(ctx, listShops)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Shop
	for rows.Next() {
		var i Shop
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShop = `-- name: UpdateShop :exec
UPDATE shops
SET name = ?
WHERE id = ?
`

type UpdateShopParams struct {
	Name string
	ID   uuid.UUID
}

func (q *Queries) UpdateShop(ctx context.Context, arg UpdateShopParams) error {
	_, err := q.db.ExecContext(ctx, updateShop, arg.Name, arg.ID)
	return err
}
