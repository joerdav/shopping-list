// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package recipesdb

import (
	"context"

	"github.com/google/uuid"
)

const createRecipe = `-- name: CreateRecipe :exec
INSERT INTO recipes (id, name)
VALUES (?, ?)
`

type CreateRecipeParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) error {
	_, err := q.db.ExecContext(ctx, createRecipe, arg.ID, arg.Name)
	return err
}

const deleteIngredient = `-- name: DeleteIngredient :exec
DELETE FROM ingredients
WHERE item_id = ? AND recipe_id = ?
`

type DeleteIngredientParams struct {
	ItemID   uuid.UUID
	RecipeID uuid.UUID
}

func (q *Queries) DeleteIngredient(ctx context.Context, arg DeleteIngredientParams) error {
	_, err := q.db.ExecContext(ctx, deleteIngredient, arg.ItemID, arg.RecipeID)
	return err
}

const getRecipe = `-- name: GetRecipe :one
SELECT id, name FROM recipes
WHERE id = ? LIMIT 1
`

func (q *Queries) GetRecipe(ctx context.Context, id uuid.UUID) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, getRecipe, id)
	var i Recipe
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listIngredientsByRecipe = `-- name: ListIngredientsByRecipe :many
SELECT item_id, recipe_id, quantity FROM ingredients
WHERE recipe_id = ?
`

func (q *Queries) ListIngredientsByRecipe(ctx context.Context, recipeID uuid.UUID) ([]Ingredient, error) {
	rows, err := q.db.QueryContext(ctx, listIngredientsByRecipe, recipeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ingredient
	for rows.Next() {
		var i Ingredient
		if err := rows.Scan(&i.ItemID, &i.RecipeID, &i.Quantity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecipes = `-- name: ListRecipes :many
SELECT id, name FROM recipes
ORDER BY name
`

func (q *Queries) ListRecipes(ctx context.Context) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, listRecipes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setIngredient = `-- name: SetIngredient :exec
INSERT OR REPLACE INTO ingredients (item_id, recipe_id, quantity)
VALUES (?, ?, ?)
`

type SetIngredientParams struct {
	ItemID   uuid.UUID
	RecipeID uuid.UUID
	Quantity int64
}

func (q *Queries) SetIngredient(ctx context.Context, arg SetIngredientParams) error {
	_, err := q.db.ExecContext(ctx, setIngredient, arg.ItemID, arg.RecipeID, arg.Quantity)
	return err
}
