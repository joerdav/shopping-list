package recipesweb

import "fmt"
import "github.com/joerdav/shopping-list/app/common"

func ingredientInRecipe(ingredientID string, recipe Recipe) bool {
	for _, i := range recipe.Ingredients {
		if i.ID == ingredientID {
			return true
		}
	}
	return false
}

templ Ingredients(recipe Recipe, availableIngredients []Item) {
	<div class="rounded-xl border border-gray-100 shadow-lg px-2" id={ fmt.Sprintf("recipe-%v", recipe.ID) }>
		<h2 class="font-semibold text-lg text-black p-2 mb-2 border-b border-gray-300">{ recipe.Name }</h2>
		<div class="px-2 py-4">
			for _,  i := range recipe.Ingredients {
				<div class="grid grid-cols-2">
					<p class="col-span-1 py-1">{ i.Name }</p>
					@common.SetQuantity(fmt.Sprintf("/recipes/%v", recipe.ID), fmt.Sprintf("#recipe-%v", recipe.ID), "itemID", i.ID, i.Quantity)
				</div>
			}
			<select
				name="itemID"
				hx-trigger="change"
				hx-put={ fmt.Sprintf("/recipes/%v", recipe.ID) }
				hx-target={ fmt.Sprintf("#recipe-%v", recipe.ID) }
				hx-swap="outerHTML"
				hx-vals='{"quantity":"1"}'
				class="bg-white border border-gray-300 text-black rounded-full shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
			>
				<option value="">Select an ingredient</option>
				for _, v := range availableIngredients {
					if !ingredientInRecipe(v.ID, recipe) {
						<option value={ v.ID }>{ v.Name }</option>
					}
				}
			</select>
		</div>
	</div>
}

templ RecipesPage(path string, recipes []Recipe, availableIngredients []Item) {
	@common.Layout("Recipes", path) {
		<section id="recipes" class="grid grid-cols-1 gap-4 p-4 sm:grid-cols-3">
			for _, s := range recipes {
				@Ingredients(s, availableIngredients)
			}
		</section>
		<div id="add-recipe-modal" class="relative z-10 group" aria-labelledby="modal-title" role="dialog" aria-modal="true">
			<div class="fixed inset-0 bg-gray-500 bg-opacity-0 transition-opacity hidden group-[.active]:block group-[.active]:bg-opacity-75"></div>
			<div class="fixed inset-0 z-10 w-screen overflow-y-auto hidden group-[.active]:block">
				<div class="flex min-h-full items-end justify-center p-4 text-center">
					<form hx-post="/recipes" hx-target="#recipes" hx-swap="beforeend" hx-on::after-request="this.reset(); me('#add-recipe-modal').classToggle('active')" class="relative transform overflow-hidden rounded-lg bg-white text-left shadow-lg transition-all">
						<div class="bg-white px-8 pb-8 pt-5">
							<div class="mt-3 text-center">
								<h3 class="text-lg font-semibold text-gray-900 pb-2" id="modal-title">Add recipe</h3>
								<input
									class="col-span-2 bg-gray-50 border border-gray-300 text-gray-900 rounded-full focus:ring-blue-500 focus:border-blue-500 block w-full py-2.5 px-1"
									placeholder="New recipe"
									type="text"
									name="recipeName"
									id="add-recipe-input"
								/>
							</div>
						</div>
						<div class="bg-gray-50 px-2 pb-2 flex gap-1">
							<input type="submit" value="Add" class="inline-flex w-full justify-center rounded-full bg-black px-1 py-2 font-semibold text-white shadow-sm hover:bg-red-500"/>
							<button type="button" class="inline-flex w-full justify-center rounded-full bg-white px-1 py-2 font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50">Cancel</button>
							<script>
								(function(){
									const modal = me("#add-recipe-modal")
									me("-").on("click", evt => {halt(); modal.classToggle("active")})
								})()
							</script>
						</div>
					</form>
				</div>
			</div>
		</div>
		<button
			class="absolute bg-white bottom-24 right-4 border border-gray-300 rounded-full shadow-lg py-2 px-3 text-gray-500"
		>+ New recipe</button>
		<script>
			(function(){
				const modal = me("#add-recipe-modal")
				const inp = me("#add-recipe-input")
				me("-").on("click", evt => {
					modal.classToggle("active")
					inp.focus()
				})
			})()
		</script>
	}
}
