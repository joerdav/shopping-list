// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: lists.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createList = `-- name: CreateList :exec
INSERT INTO lists (id, created_date, user_id)
VALUES (?, ?, ?)
`

type CreateListParams struct {
	ID          uuid.UUID
	CreatedDate int64
	UserID      string
}

func (q *Queries) CreateList(ctx context.Context, arg CreateListParams) error {
	_, err := q.db.ExecContext(ctx, createList, arg.ID, arg.CreatedDate, arg.UserID)
	return err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM list_items
where item_id = ? AND list_id = ?
`

type DeleteItemParams struct {
	ItemID uuid.UUID
	ListID uuid.UUID
}

func (q *Queries) DeleteItem(ctx context.Context, arg DeleteItemParams) error {
	_, err := q.db.ExecContext(ctx, deleteItem, arg.ItemID, arg.ListID)
	return err
}

const deleteItemsByList = `-- name: DeleteItemsByList :exec
DELETE FROM list_items
WHERE list_id = ?
`

func (q *Queries) DeleteItemsByList(ctx context.Context, listID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteItemsByList, listID)
	return err
}

const deleteList = `-- name: DeleteList :exec
DELETE FROM lists
WHERE id = ?
`

func (q *Queries) DeleteList(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteList, id)
	return err
}

const deleteRecipe = `-- name: DeleteRecipe :exec
DELETE FROM list_recipes
where recipe_id = ? AND list_id = ?
`

type DeleteRecipeParams struct {
	RecipeID uuid.UUID
	ListID   uuid.UUID
}

func (q *Queries) DeleteRecipe(ctx context.Context, arg DeleteRecipeParams) error {
	_, err := q.db.ExecContext(ctx, deleteRecipe, arg.RecipeID, arg.ListID)
	return err
}

const deleteRecipesByList = `-- name: DeleteRecipesByList :exec
DELETE FROM list_recipes
WHERE list_id = ?
`

func (q *Queries) DeleteRecipesByList(ctx context.Context, listID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteRecipesByList, listID)
	return err
}

const getAllLists = `-- name: GetAllLists :many
SELECT id, user_id, created_date, bought FROM lists
WHERE user_id = ?
ORDER BY created_date DESC
`

func (q *Queries) GetAllLists(ctx context.Context, userID string) ([]List, error) {
	rows, err := q.db.QueryContext(ctx, getAllLists, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []List
	for rows.Next() {
		var i List
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedDate,
			&i.Bought,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemsByList = `-- name: GetItemsByList :many
SELECT item_id, list_id, quantity FROM list_items
WHERE list_id = ?
`

func (q *Queries) GetItemsByList(ctx context.Context, listID uuid.UUID) ([]ListItem, error) {
	rows, err := q.db.QueryContext(ctx, getItemsByList, listID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListItem
	for rows.Next() {
		var i ListItem
		if err := rows.Scan(&i.ItemID, &i.ListID, &i.Quantity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getList = `-- name: GetList :one
SELECT id, user_id, created_date, bought FROM lists
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetList(ctx context.Context, id uuid.UUID) (List, error) {
	row := q.db.QueryRowContext(ctx, getList, id)
	var i List
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedDate,
		&i.Bought,
	)
	return i, err
}

const getRecipesByList = `-- name: GetRecipesByList :many
SELECT recipe_id, list_id, quantity FROM list_recipes
WHERE list_id = ?
`

func (q *Queries) GetRecipesByList(ctx context.Context, listID uuid.UUID) ([]ListRecipe, error) {
	rows, err := q.db.QueryContext(ctx, getRecipesByList, listID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRecipe
	for rows.Next() {
		var i ListRecipe
		if err := rows.Scan(&i.RecipeID, &i.ListID, &i.Quantity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setItem = `-- name: SetItem :exec
INSERT OR REPLACE INTO list_items (item_id, list_id, quantity)
VALUES (?, ?, ?)
`

type SetItemParams struct {
	ItemID   uuid.UUID
	ListID   uuid.UUID
	Quantity int64
}

func (q *Queries) SetItem(ctx context.Context, arg SetItemParams) error {
	_, err := q.db.ExecContext(ctx, setItem, arg.ItemID, arg.ListID, arg.Quantity)
	return err
}

const setRecipe = `-- name: SetRecipe :exec
INSERT OR REPLACE INTO list_recipes (recipe_id, list_id, quantity)
VALUES (?, ?, ?)
`

type SetRecipeParams struct {
	RecipeID uuid.UUID
	ListID   uuid.UUID
	Quantity int64
}

func (q *Queries) SetRecipe(ctx context.Context, arg SetRecipeParams) error {
	_, err := q.db.ExecContext(ctx, setRecipe, arg.RecipeID, arg.ListID, arg.Quantity)
	return err
}

const updateList = `-- name: UpdateList :one
UPDATE lists
set bought = ?
WHERE id = ?
RETURNING id, user_id, created_date, bought
`

type UpdateListParams struct {
	Bought string
	ID     uuid.UUID
}

func (q *Queries) UpdateList(ctx context.Context, arg UpdateListParams) (List, error) {
	row := q.db.QueryRowContext(ctx, updateList, arg.Bought, arg.ID)
	var i List
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedDate,
		&i.Bought,
	)
	return i, err
}
